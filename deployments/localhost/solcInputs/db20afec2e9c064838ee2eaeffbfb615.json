{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport '@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol';\nimport './PriceConverter.sol';\n\nerror FundMe__NotOwner();\n\n/**\n * @title A contract for Crowdfunding\n * @author Gonzalo Barria\n * @notice This contract is a demo of funding\n * @dev This implements price feeds as a library\n */\ncontract FundMe {\n  // Type Declarations\n  using PriceConverter for uint256;\n\n  // State variables\n  //   event Funded(address indexed from, uint256 amount);\n\n  mapping(address => uint256) private s_addressToAmountFunded;\n  address[] private s_funders;\n  address private immutable i_owner;\n  uint256 public constant MINIMUM_USD = 50 * 10**18;\n  AggregatorV3Interface private s_priceFeed;\n\n  modifier onlyOwner() {\n    // require(msg.sender == i_owner);\n    if (msg.sender != i_owner) revert FundMe__NotOwner();\n    _;\n  }\n\n  //   Functions Order\n  //   constructor\n  //   receive\n  //   fallback\n  //   external\n  //   public\n  //   internal\n  //   private\n  //   view / pure\n\n  constructor(address priceFeedAddress) {\n    i_owner = msg.sender;\n    s_priceFeed = AggregatorV3Interface(priceFeedAddress);\n  }\n\n  /**\n   * @notice This function funds this contract\n   * @dev ayuda para desarrolladores\n   */\n  function fund() public payable {\n    require(\n      msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\n      'You need to spend more ETH!'\n    );\n    // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \"You need to spend more ETH!\");\n    s_addressToAmountFunded[msg.sender] += msg.value;\n    s_funders.push(msg.sender);\n    // emit Funded(msg.sender, msg.value);\n  }\n\n  function withdraw() public payable onlyOwner {\n    for (\n      uint256 funderIndex = 0;\n      funderIndex < s_funders.length;\n      funderIndex++\n    ) {\n      address funder = s_funders[funderIndex];\n      s_addressToAmountFunded[funder] = 0;\n    }\n    s_funders = new address[](0);\n    // payable(msg.sender).transfer(address(this).balance);\n    (bool success, ) = payable(msg.sender).call{value: address(this).balance}(\n      ''\n    );\n    // call vs delegatecall\n    require(success, 'Transfer failed');\n  }\n\n  function cheaperWithdraw() public payable onlyOwner {\n    address[] memory funders = s_funders;\n\n    for (uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++) {\n      address funder = funders[funderIndex];\n      s_addressToAmountFunded[funder] = 0;\n    }\n    s_funders = new address[](0);\n    // payable(msg.sender).transfer(address(this).balance);\n    (bool success, ) = i_owner.call{value: address(this).balance}('');\n    // call vs delegatecall\n    require(success, 'Transfer failed');\n  }\n\n  //   view / pure\n\n  function getAddressToAmountFunded(address funder)\n    public\n    view\n    returns (uint256)\n  {\n    return s_addressToAmountFunded[funder];\n  }\n\n  function getFunder(uint256 index) public view returns (address) {\n    return s_funders[index];\n  }\n\n  function getOwner() public view returns (address) {\n    return i_owner;\n  }\n\n  function getPriceFeed() public view returns (AggregatorV3Interface) {\n    return s_priceFeed;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.8;\r\n\r\nimport '@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol';\r\n\r\n// Why is this a library and not abstract?\r\n// Why not an interface?\r\nlibrary PriceConverter {\r\n  // We could make this public, but then we'd have to deploy it\r\n  function getPrice(AggregatorV3Interface priceFeed)\r\n    internal\r\n    view\r\n    returns (uint256)\r\n  {\r\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\r\n    // ETH/USD rate in 18 digit\r\n    return uint256(answer * 10000000000);\r\n  }\r\n\r\n  // 1000000000\r\n  function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\r\n    internal\r\n    view\r\n    returns (uint256)\r\n  {\r\n    uint256 ethPrice = getPrice(priceFeed);\r\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\r\n    // the actual ETH/USD conversion rate, after adjusting the extra 0s.\r\n    return ethAmountInUsd;\r\n  }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}